Dataset name: spider
SeqSeq model name: lgesql_electra
Seq2Seq model output JSON file: model_output_postprocess/outputs/lgesql_electra/lgesql_electra_dev_output.json
Test JSON file: datasets/spider/dev.json
Gold SQL TXT file: datasets/spider/dev_gold.sql
Dataset schema JSON file: datasets/spider/tables.json
SQLite databases' directory: datasets/spider/database
==================================================================
ACTION REPORT: Testing pipeline starts ......
ACTION REPORT: Generalize the sqls(and dialects) for the test data 
ERR in SQLGenV2 - museum_visit: SELECT AVG(visitor.age) @FROM visitor WHERE @visitor.level_of_membership @NOT IN (SELECT @visitor.level_of_membership FROM visitor @@GROUPBY )
ERR in SQLGenV2 - wta_1: SELECT matches.winner_name , @players.last_name @FROM players JOIN matches ON players.player_id = matches.winner_id @WHERE @matches.match_num - matches.match_num = (SELECT MAX(@matches.minutes) FROM matches @@ORDERBY )  @@ORDERBY
ERR in SQLGenV2 - dog_kennels: SELECT professionals.professional_id , professionals.role_code , professionals.email_address FROM professionals WHERE @professionals.professional_id NOT IN (SELECT treatments.professional_id FROM treatments @@GROUPBY )
ERR in SQLGenV2 - dog_kennels: SELECT owners.owner_id , owners.zip_code JOIN owners ON dogs.owner_id = owners.owner_id  GROUP BY owners.owner_id ORDER BY SUM(charges.charge_amount) DESC LIMIT 1
ERR in SQLGenV2 - dog_kennels: SELECT professionals.role_code , @professionals.street , professionals.state , professionals.city FROM professionals WHERE @professionals.city @NOT LIKE 'terminal'
Low confidence generalization (1034) has done on test dataset!
Serialization files are saved in the directory: /home/kaimary/GAR/output/spider/serialization/lgesql_electra/1000/test
RESULT REPORT: Test data generalization is done!
==================================================================
ACTION REPORT: Generate re-ranking model's input data to /home/kaimary/GAR/output/spider/reranker/spider_lgesql_electra_100_all-mpnet-base-v2_roberta-base_bertpooler/test.json
Reading dataset : datasets/spider/dev.json for RecallChecker......
<Generate but Miss>
30 gold sql: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
inference sql: SELECT singer.country FROM singer WHERE @singer.age @< 'terminal' INTERSECT SELECT singer.country FROM singer WHERE singer.age > 'terminal'
===============================================================================================================================
<Generate but Miss>
54 gold sql: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
inference sql: SELECT COUNT(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'terminal' @AND pets.pettype = 'terminal'  
===============================================================================================================================
<Generate but Miss>
80 gold sql: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
inference sql: @SELECT has_pet.stuid , COUNT(*) @FROM has_pet GROUP BY has_pet.stuid HAVING @COUNT(*) @!= 'terminal'
===============================================================================================================================
<Generate but Miss>
83 gold sql: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
inference sql: SELECT student.lname FROM @student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE @pets.pet_age @= 'terminal'  
===============================================================================================================================
<Generate but Miss>
110 gold sql: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
inference sql: @SELECT @COUNT(*) , @car_makers.maker , @COUNT(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker  GROUP BY @car_makers.id 
===============================================================================================================================
<Generate but Miss>
116 gold sql: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
inference sql: SELECT COUNT(*) @FROM @car_makers WHERE car_makers.country = 'terminal'
===============================================================================================================================
<Generate but Miss>
119 gold sql: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
inference sql: SELECT @MIN(cars_data.weight) FROM cars_data WHERE @cars_data.year @= 'terminal' @ORDER BY cars_data.cylinders ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
120 gold sql: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
inference sql: SELECT @MIN(cars_data.weight) FROM cars_data WHERE @cars_data.year @= 'terminal' @ORDER BY cars_data.cylinders ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
122 gold sql: SELECT Maker ,  Model FROM MODEL_LIST;
inference sql: SELECT @car_makers.maker , model_list.model @FROM @car_makers JOIN @model_list ON car_makers.id = model_list.maker  @@GROUPBY 
===============================================================================================================================
<Generate but Miss>
123 gold sql: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
inference sql: SELECT countries.countryname , @car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country  @@GROUPBY 
===============================================================================================================================
<Generate but Miss>
124 gold sql: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
inference sql: SELECT countries.countryname , @car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country  @@GROUPBY 
===============================================================================================================================
<Generate but Miss>
130 gold sql: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
inference sql: SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'terminal' GROUP BY @countries.countryid HAVING COUNT(*) >= 'terminal' 
===============================================================================================================================
<Generate but Miss>
132 gold sql: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
inference sql: SELECT @MAX(@car_names.make) , cars_data.horsepower FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 'terminal'  @@ORDERBY
===============================================================================================================================
<Generate but Miss>
133 gold sql: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
inference sql: SELECT @model_list.model @FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN @model_list ON car_names.model = model_list.model  GROUP BY @car_names.model ORDER BY SUM(cars_data.mpg) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
142 gold sql: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
inference sql: SELECT model_list.model @FROM model_list JOIN car_names ON model_list.model = car_names.model  GROUP BY model_list.model ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
153 gold sql: select distinct year from cars_data where weight between 3000 and 4000;
inference sql: SELECT cars_data.year FROM cars_data WHERE @cars_data.weight @< 'terminal' @INTERSECT SELECT cars_data.year FROM cars_data WHERE cars_data.weight > 'terminal'
===============================================================================================================================
<Generate but Miss>
158 gold sql: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
inference sql: SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE @car_names.make @= 'terminal'  ORDER BY cars_data.accelerate ASC LIMIT 1
===============================================================================================================================
self.total_candidategen_miss_count:1
self.total_candidategen_miss_count:2
<Generate but Miss>
168 gold sql: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
inference sql: SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE @cars_data.cylinders @< 'terminal'  @ORDER BY cars_data.horsepower ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
176 gold sql: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
inference sql: SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id HAVING COUNT(*) >= 'terminal'  INTERSECT SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id HAVING @@COUNT(*) @>= 'terminal' 
===============================================================================================================================
<Generate but Miss>
177 gold sql: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
inference sql: SELECT countries.countryid , countries.countryname FROM @countries JOIN @car_makers ON countries.countryid = car_makers.country @WHERE @car_names.model @= 'terminal' @@GROUPBY  UNION SELECT countries.countryid , countries.countryname @FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN @car_names ON model_list.model = car_names.model  GROUP BY @countries.countryid HAVING COUNT(*) > 'terminal' 
===============================================================================================================================
<Generate but Miss>
178 gold sql: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
inference sql: SELECT countries.countryid , countries.countryname FROM @countries JOIN @car_makers ON countries.countryid = car_makers.country @WHERE @car_names.model @= 'terminal' @@GROUPBY  UNION SELECT countries.countryid , countries.countryname @FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model  GROUP BY @car_makers.country HAVING COUNT(*) > 'terminal' 
===============================================================================================================================
<Generate but Miss>
211 gold sql: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
inference sql: SELECT COUNT(*) FROM airports JOIN flights ON airports.airportcode = flights.destairport WHERE airports.city = 'terminal' @AND airports.city = 'terminal'  
===============================================================================================================================
<Generate but Miss>
216 gold sql: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
inference sql: SELECT COUNT(*) @FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE @airlines.airline @= 'terminal'  
===============================================================================================================================
<Generate but Miss>
225 gold sql: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
inference sql: SELECT @flights.destairport @FROM @flights GROUP BY flights.destairport ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
226 gold sql: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
inference sql: SELECT @flights.destairport @FROM @flights GROUP BY flights.destairport ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
227 gold sql: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
inference sql: SELECT @flights.destairport @FROM @flights GROUP BY flights.destairport ORDER BY COUNT(*) ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
228 gold sql: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
inference sql: SELECT airports.airportcode @FROM @airports GROUP BY @airports.airportcode ORDER BY COUNT(*) ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
232 gold sql: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
inference sql: SELECT airlines.abbreviation , @airlines.country @FROM @airlines JOIN @flights ON airlines.uid = flights.airline JOIN airports ON flights.destairport = airports.airportcode  GROUP BY airlines.abbreviation ORDER BY COUNT(*) ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
241 gold sql: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
inference sql: SELECT airlines.airline FROM @flights JOIN airlines ON flights.airline = airlines.uid  GROUP BY @flights.airline HAVING COUNT(*) >= 'terminal' 
===============================================================================================================================
<Generate but Miss>
242 gold sql: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
inference sql: SELECT airlines.airline FROM @flights JOIN airlines ON flights.airline = airlines.uid  GROUP BY @airlines.airline HAVING COUNT(*) >= 'terminal' 
===============================================================================================================================
<Generate but Miss>
243 gold sql: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
inference sql: SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.airline HAVING @SUM(@flights.flightno) < 'terminal' 
===============================================================================================================================
<Generate but Miss>
258 gold sql: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
inference sql: SELECT airports.airportname FROM airports @WHERE @airports.airportcode @= 'terminal'   EXCEPT SELECT airports.airportname @FROM airports JOIN flights ON airports.airportcode = flights.destairport   
===============================================================================================================================
<Generate but Miss>
266 gold sql: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
inference sql: SELECT employee.city FROM employee @WHERE @employee.age @> 'terminal' GROUP BY employee.city HAVING COUNT(*) > 'terminal'
===============================================================================================================================
<Generate but Miss>
270 gold sql: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
inference sql: SELECT shop.manager_name , shop.district FROM shop @GROUP BY shop.manager_name ORDER BY SUM(shop.number_products) DESC LIMIT 1
===============================================================================================================================
ERR in SQLGenV2 - museum_visit: SELECT AVG(visitor.age) @FROM visitor WHERE @visitor.level_of_membership @NOT IN (SELECT @visitor.level_of_membership FROM visitor @@GROUPBY )
<Generate but Miss>
423 gold sql: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
inference sql: SELECT visitor.name , visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id  @GROUP BY visitor.id ORDER BY @COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
427 gold sql: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
inference sql: SELECT COUNT(*) FROM visit WHERE visit.museum_id NOT IN (SELECT @museum.museum_id @FROM museum WHERE museum.open_year > 'terminal' )
===============================================================================================================================
self.total_candidategen_miss_count:3
<Generate but Miss>
460 gold sql: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
inference sql: SELECT players.first_name , players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id  GROUP BY @rankings.player_id ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
467 gold sql: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
inference sql: SELECT matches.loser_name , matches.winner_name FROM matches @WHERE @matches.minutes = (SELECT MAX(matches.minutes) FROM matches ) @@ORDERBY
===============================================================================================================================
ERR in SQLGenV2 - wta_1: SELECT matches.winner_name , @players.last_name @FROM players JOIN matches ON players.player_id = matches.winner_id @WHERE @matches.match_num - matches.match_num = (SELECT MAX(@matches.minutes) FROM matches @@ORDERBY )  @@ORDERBY
<Generate but Miss>
480 gold sql: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
inference sql: SELECT rankings.ranking_date , @COUNT(*) FROM rankings GROUP BY rankings.ranking_date
===============================================================================================================================
<Generate but Miss>
488 gold sql: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
inference sql: SELECT players.first_name , players.country_code , players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id  @@GROUPBY ORDER BY @matches.winner_rank DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
516 gold sql: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
inference sql: SELECT departments.department_name , degree_programs.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id  GROUP BY degree_programs.department_id ORDER BY @SUM(degree_programs.degree_program_id) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
533 gold sql: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
inference sql: SELECT students.first_name , @students.middle_name , student_enrolment.student_id , student_enrolment.semester_id FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id  GROUP BY student_enrolment.semester_id HAVING @COUNT(*) @= 'terminal' 
===============================================================================================================================
<Generate but Miss>
534 gold sql: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
inference sql: @SELECT students.first_name , @students.middle_name , student_enrolment.student_id , student_enrolment.semester_id FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id  GROUP BY student_enrolment.semester_id HAVING COUNT(*) = 'terminal' 
===============================================================================================================================
<Generate but Miss>
542 gold sql: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
inference sql: @SELECT students.first_name , students.middle_name , students.last_name , @COUNT(*) FROM @student_enrolment JOIN @students ON student_enrolment.student_id = students.student_id  GROUP BY student_enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
549 gold sql: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
inference sql: SELECT students.last_name @FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE @addresses.city = 'terminal'   EXCEPT SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id   
===============================================================================================================================
<Generate but Miss>
550 gold sql: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
inference sql: SELECT students.last_name @FROM @students WHERE addresses.city = 'terminal'   EXCEPT SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id   
===============================================================================================================================
<Generate but Miss>
560 gold sql: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
inference sql: SELECT students.first_name FROM students WHERE @students.current_address_id > 'terminal'
===============================================================================================================================
<Generate but Miss>
561 gold sql: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
inference sql: SELECT @addresses.line_1 , addresses.line_3 FROM addresses JOIN students ON addresses.address_id = students.permanent_address_id  GROUP BY addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
self.total_candidategen_miss_count:4
<Generate but Miss>
570 gold sql: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
inference sql: SELECT MAX(transcripts.transcript_date) FROM transcripts @@ORDERBY
===============================================================================================================================
<Generate but Miss>
571 gold sql: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
inference sql: SELECT transcript_contents.transcript_id , transcript_contents.student_course_id @FROM transcript_contents GROUP BY transcript_contents.student_course_id ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
572 gold sql: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
inference sql: SELECT @student_enrolment_courses.course_id , COUNT(transcript_contents.transcript_id) FROM transcript_contents JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id  GROUP BY transcript_contents.student_course_id ORDER BY COUNT(transcript_contents.transcript_id) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
575 gold sql: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
inference sql: SELECT semesters.semester_name @FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'terminal'   INTERSECT SELECT semesters.semester_name @FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'terminal'  
===============================================================================================================================
<Generate but Miss>
578 gold sql: SELECT count(DISTINCT current_address_id) FROM Students
inference sql: SELECT addresses.other_address_details @FROM addresses JOIN students ON addresses.address_id = students.permanent_address_id   
===============================================================================================================================
<Generate but Miss>
597 gold sql: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
inference sql: SELECT COUNT(tv_channel.series_name) , tv_channel.content @FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id   
===============================================================================================================================
<Generate but Miss>
598 gold sql: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
inference sql: SELECT COUNT(tv_channel.series_name) , tv_channel.content @FROM @tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel   
===============================================================================================================================
<Generate but Miss>
657 gold sql: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
inference sql: SELECT COUNT(*) FROM poker_player WHERE poker_player.earnings < 'terminal' @GROUP BY @poker_player.final_table_made @ORDER BY COUNT(*) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
664 gold sql: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
inference sql: SELECT people.name FROM @poker_player JOIN people ON poker_player.people_id = people.people_id  @GROUP BY @people.name ORDER BY @COUNT(*) ASC
===============================================================================================================================
<Generate but Miss>
695 gold sql: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
inference sql: SELECT contestants.contestant_number , contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number  @@GROUPBY ORDER BY @contestants.contestant_name ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
744 gold sql: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
inference sql: SELECT COUNT(*) FROM countrylanguage WHERE @countrylanguage.language @= 'terminal'
===============================================================================================================================
<Generate but Miss>
745 gold sql: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
inference sql: SELECT COUNT(*) FROM countrylanguage WHERE @countrylanguage.language @= 'terminal'
===============================================================================================================================
<Generate but Miss>
754 gold sql: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
inference sql: SELECT country.name @FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'terminal' OR @countrylanguage.language = 'terminal'  
===============================================================================================================================
<Generate but Miss>
755 gold sql: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
inference sql: SELECT @countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.language = 'terminal' OR countrylanguage.language = 'terminal'
===============================================================================================================================
<Generate but Miss>
760 gold sql: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
inference sql: SELECT city.name @FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'terminal' @@GROUPBY ORDER BY city.population DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
761 gold sql: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
inference sql: @SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'terminal'  @ORDER BY city.population DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
764 gold sql: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
inference sql: SELECT AVG(country.lifeexpectancy) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE @countrylanguage.language @!= 'terminal'  
===============================================================================================================================
<Generate but Miss>
765 gold sql: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
inference sql: SELECT AVG(country.lifeexpectancy) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE @countrylanguage.language @!= 'terminal'  
===============================================================================================================================
<Generate but Miss>
775 gold sql: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
inference sql: SELECT country.name FROM country WHERE @country.population @< (SELECT @MIN(country.population) FROM country WHERE country.continent = 'terminal' )
===============================================================================================================================
<Generate but Miss>
777 gold sql: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
inference sql: SELECT country.name FROM country WHERE @country.population @> (SELECT MAX(country.population) FROM country WHERE country.continent = 'terminal' ) AND @@country.continent @= 'terminal'
===============================================================================================================================
<Generate but Miss>
782 gold sql: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
inference sql: SELECT country.code FROM country WHERE @country.governmentform = 'terminal' @EXCEPT SELECT countrylanguage.countrycode FROM countrylanguage @WHERE @countrylanguage.language @!= 'terminal' @@GROUPBY
===============================================================================================================================
<Generate but Miss>
783 gold sql: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
inference sql: SELECT country.code FROM country WHERE country.governmentform = 'terminal' @EXCEPT SELECT countrylanguage.countrycode FROM countrylanguage @WHERE @countrylanguage.language @!= 'terminal' @@GROUPBY
===============================================================================================================================
<Generate but Miss>
784 gold sql: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
inference sql: SELECT city.name @FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE @countrylanguage.language @= 'terminal' AND countrylanguage.isofficial != 'terminal'  
===============================================================================================================================
<Generate but Miss>
786 gold sql: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
inference sql: SELECT city.name @FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'terminal' @AND @countrylanguage.isofficial = 'terminal'  
===============================================================================================================================
<Generate but Miss>
793 gold sql: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
inference sql: SELECT country.name , COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code  GROUP BY @country.name HAVING COUNT(*) > 'terminal' 
===============================================================================================================================
<Generate but Miss>
798 gold sql: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
inference sql: @SELECT AVG(country.population) , AVG(@country.lifeexpectancy) , country.continent FROM country GROUP BY country.continent HAVING AVG(@country.lifeexpectancy) < 'terminal'
===============================================================================================================================
<Generate but Miss>
816 gold sql: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
inference sql: @SELECT countrylanguage.language , @SUM(countrylanguage.percentage) FROM countrylanguage GROUP BY countrylanguage.language ORDER BY @SUM(countrylanguage.percentage) DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
817 gold sql: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
inference sql: SELECT @countrylanguage.language , @SUM(countrylanguage.percentage) FROM countrylanguage GROUP BY countrylanguage.countrycode @@ORDERBY
===============================================================================================================================
<Generate but Miss>
818 gold sql: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
inference sql: SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.language = 'terminal' @@GROUPBY ORDER BY countrylanguage.percentage DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
820 gold sql: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
inference sql: SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'terminal' @GROUP BY countrylanguage.countrycode ORDER BY SUM(countrylanguage.percentage) DESC LIMIT 1
===============================================================================================================================
self.total_candidategen_miss_count:5
<Generate but Miss>
890 gold sql: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
inference sql: SELECT highschooler.name @FROM @highschooler JOIN @friend ON highschooler.id = friend.friend_id WHERE highschooler.name = 'terminal'  
===============================================================================================================================
self.total_candidategen_miss_count:6
<Generate but Miss>
898 gold sql: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
inference sql: SELECT highschooler.id @FROM highschooler JOIN friend ON highschooler.id = friend.friend_id    INTERSECT SELECT likes.student_id @FROM likes   
===============================================================================================================================
self.total_candidategen_miss_count:7
self.total_candidategen_miss_count:8
<Generate but Miss>
905 gold sql: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
inference sql: SELECT @COUNT(*) , highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name 
===============================================================================================================================
<Generate but Miss>
906 gold sql: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
inference sql: SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id  @@GROUPBY ORDER BY @highschooler.grade DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
907 gold sql: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
inference sql: SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id  @@GROUPBY ORDER BY @likes.student_id DESC LIMIT 1
===============================================================================================================================
<Generate but Miss>
910 gold sql: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
inference sql: SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.grade > 'terminal' GROUP BY friend.student_id @ORDER BY COUNT(*) ASC
===============================================================================================================================
<Generate but Miss>
911 gold sql: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
inference sql: SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id @WHERE highschooler.grade > 'terminal' GROUP BY friend.student_id ORDER BY COUNT(*) ASC
===============================================================================================================================
<Generate but Miss>
917 gold sql: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
inference sql: SELECT @MIN(highschooler.grade) FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend ) @@ORDERBY
===============================================================================================================================
<Generate but Miss>
922 gold sql: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
inference sql: SELECT professionals.professional_id , professionals.last_name , professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE professionals.state = 'terminal'   UNION SELECT professionals.professional_id , @professionals.last_name , professionals.cell_number @FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id @@WHERE GROUP BY professionals.professional_id HAVING COUNT(*) > 'terminal' 
===============================================================================================================================
<Generate but Miss>
923 gold sql: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
inference sql: SELECT professionals.professional_id , professionals.last_name , professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE professionals.state = 'terminal'   UNION SELECT professionals.professional_id , @professionals.last_name , professionals.cell_number @FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id @@WHERE GROUP BY professionals.professional_id HAVING COUNT(*) > 'terminal' 
===============================================================================================================================
<Generate but Miss>
925 gold sql: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
inference sql: SELECT dogs.name FROM dogs    EXCEPT SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id @WHERE treatments.cost_of_treatment > 'terminal' @@GROUPBY 
===============================================================================================================================
<Generate but Miss>
926 gold sql: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
inference sql: SELECT professionals.first_name @FROM professionals EXCEPT SELECT owners.first_name FROM owners
===============================================================================================================================
<Generate but Miss>
927 gold sql: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
inference sql: SELECT professionals.first_name @FROM professionals EXCEPT SELECT owners.first_name FROM owners
===============================================================================================================================
ERR in SQLGenV2 - dog_kennels: SELECT professionals.professional_id , professionals.role_code , professionals.email_address FROM professionals WHERE @professionals.professional_id NOT IN (SELECT treatments.professional_id FROM treatments @@GROUPBY )
ERR in SQLGenV2 - dog_kennels: SELECT owners.owner_id , owners.zip_code JOIN owners ON dogs.owner_id = owners.owner_id  GROUP BY owners.owner_id ORDER BY SUM(charges.charge_amount) DESC LIMIT 1
<Generate but Miss>
954 gold sql: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
inference sql: SELECT dogs.name , treatments.date_of_treatment @FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id  @GROUP BY dogs.breed_code ORDER BY COUNT(*) ASC LIMIT 1
===============================================================================================================================
<Generate but Miss>
955 gold sql: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
inference sql: SELECT dogs.name , @treatments.date_of_treatment FROM dogs JOIN @treatments ON dogs.dog_id = treatments.dog_id @WHERE dogs.breed_code = (SELECT @MIN(dogs.breed_code) FROM dogs ) @@GROUPBY @@ORDERBY
===============================================================================================================================
ERR in SQLGenV2 - dog_kennels: SELECT professionals.role_code , @professionals.street , professionals.state , professionals.city FROM professionals WHERE @professionals.city @NOT LIKE 'terminal'
<Generate but Miss>
990 gold sql: SELECT charge_type ,  charge_amount FROM Charges
inference sql: SELECT charges.charge_type , @SUM(charges.charge_amount) FROM charges GROUP BY charges.charge_type
===============================================================================================================================
<Generate but Miss>
991 gold sql: SELECT charge_type ,  charge_amount FROM Charges
inference sql: SELECT charges.charge_type , @SUM(charges.charge_amount) FROM charges @GROUP BY charges.charge_type
===============================================================================================================================
<Generate but Miss>
996 gold sql: SELECT DISTINCT breed_code ,  size_code FROM dogs
inference sql: SELECT dogs.breed_code , sizes.size_description @FROM @dogs JOIN @sizes ON dogs.size_code = sizes.size_code  @@GROUPBY 
===============================================================================================================================
<Generate but Miss>
1033 gold sql: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
inference sql: SELECT properties.property_name FROM properties WHERE @properties.property_type_code @= 'terminal' OR properties.room_count > 'terminal'
===============================================================================================================================
total data: 1034
output length: 273
model correct inference count: 772; model incorrect inference count: 262
low confidence in correct count: 147; low confidence in incorrect count: 155
hit generation count (for incorrect inference): 27 miss generation count (for incorrect inference): 116
correct but go the generation count(for correct inferrence): 130
failed_generation:0
Total | Total Miss | Correct but Generation Miss | Incorrect but Hit Generation Miss: 157|8|8|0@100
Candidate generation miss rate: 0.050955414012738856
RESULT REPORT: The input data of the re-ranking model is ready now!
==================================================================
Re-ranking model /home/kaimary/GAR/output/spider/reranker/bertpooler_roberta-base/model.tar.gz does not exist or /home/kaimary/GAR/output/spider/reranker/spider_lgesql_electra_100_all-mpnet-base-v2_roberta-base_bertpooler/pred.txt exists.
==================================================================
